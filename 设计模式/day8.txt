设计模式

设计模式概述
	设计模式(Designpattern)是一套被反复使用,多数人知晓的,经过分类编目的,代码设计经验的总结,使用设计模式是为了可重用代码,让代码更容易被他人理解,保证代码可靠性.毫无疑问,设计模式于计于他人于系统都是多赢的,设计模式使代码编制真正工程化,设计模式是软件工程的基石.如同大厦的一块块砖石一样.

	模式的经典定义:每个模式都描述了一个在我们的环境中不断出现的问题,然后描述了该问题的解决方案的核心.通过这种方式,我们可以无数次的重用那些已有的解决方案,无需再重复相同的工作.即模式是在特定环境中解决问题的一种方案,现有两派,有的人建议使用设计模式,又得人不建议.

1.单例(单一实例)
	这个类只能创建一个对象
	php的应用主要在于数据库应用,一个应用中会存在大量的数据库操作,使用代理模式可以可以避免大量的new操作消耗的资源

2.工厂
	接口中定义一些方法
	实现接口的类实现这些方法
	工厂类: 用以实例化对象,
	优点: 为系统结构提供了灵活的动态扩展机制,方便维护
3.工厂方法
	工厂方法模式核心工厂类不在负责所有对象的创建,而是将具体创建的工作交给子类去做,成为一个抽象工厂角色,他仅负责给出具体工厂类必须实现的接口,而不接触哪一个产品类应当被实例化这种细节.
4.观察者
	它是一种事件系统,意味着这一模式允许某个类观察另一个类的状态,当被观察的类状态发生改变的时候,观察类可以收到通知并且做出相应的动作.观察者模式提供了避免组件之间紧密耦合的另一种方法
5.适配器
	可将一个类的接口转换成本客户希望的另外一个接口,使得原本不兼容的接口能够一起工作.通俗的理解就是将不同接口适配成统一的接口
6.策略模式
	(1)多个类只区别在表现行为不同,可以使用strategy(策略)模式,在运行时动态选择具体要执行的行为.
	(2)需要在不同情况下使用不同的策略(算法),或者策略还可能在未来用其他方式来实现.
	(3)对客户隐藏具体策略(算法)的实现细节,彼此完全独立
	(4)客户端必须知道所有的策略类,并自行决定使用哪一个策略类,策略模式只适用于客户端知道所有的算法或者行为的情况.
	(5)策略模式造成很多的策略类,每个具体策略类都会产生一个新类,

	优点:
		1. 策略模式提供了管理相关的算法组的办法
		2. 算法封闭在独立的Strategy类中使得你可以独立于其Context改变它
		3. 使用策略模式可以避免使用多重条件转义语句
7.门面模式
	优点:
		1.他对客户屏蔽了子系统组件,因而减少了客户处理的对象的数目并使得子系统使用起来更加方便
		2.实现了子系统与客户之间的松耦合关系
		3.如果应用需要,他并不限制它们使用子系统类,因此可以在系统易用性与能用性之间加以选择
	使用场景
		1.为一些复杂的子系统提供一组接口
		2.提高子系统的独立性
		3.在层次化结构中,可以使用门面模式定义系统的每一层的接口
8.DI依赖注入 [反转控制]   [说白了就是传递一个参数]
	DI [depends inject]
	减少类和类之间联系

